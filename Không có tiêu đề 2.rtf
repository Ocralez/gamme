{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 program TicTacToe;\
uses crt;\
\
const\
  SIZE = 3;\
  \
type\
  TBoard = array[1..SIZE, 1..SIZE] of char;\
\
var\
  board: TBoard;\
  currentPlayer: char;\
  moves: integer;\
\
procedure InitializeBoard(var b: TBoard);\
var\
  i, j: integer;\
begin\
  for i := 1 to SIZE do\
    for j := 1 to SIZE do\
      b[i, j] := ' ';\
end;\
\
procedure PrintBoard(b: TBoard);\
var\
  i, j: integer;\
begin\
  clrscr;\
  for i := 1 to SIZE do\
  begin\
    for j := 1 to SIZE do\
    begin\
      write(b[i, j]);\
      if j < SIZE then\
        write('|');\
    end;\
    writeln;\
    if i < SIZE then\
      writeln('-----');\
  end;\
end;\
\
function CheckWin(b: TBoard; player: char): boolean;\
var\
  i, j: integer;\
  win: boolean;\
begin\
  // Check rows\
  for i := 1 to SIZE do\
  begin\
    win := true;\
    for j := 1 to SIZE do\
      if b[i, j] <> player then\
        win := false;\
    if win then\
      exit(true);\
  end;\
\
  // Check columns\
  for j := 1 to SIZE do\
  begin\
    win := true;\
    for i := 1 to SIZE do\
      if b[i, j] <> player then\
        win := false;\
    if win then\
      exit(true);\
  end;\
\
  // Check diagonals\
  win := true;\
  for i := 1 to SIZE do\
    if b[i, i] <> player then\
      win := false;\
  if win then\
    exit(true);\
\
  win := true;\
  for i := 1 to SIZE do\
    if b[i, SIZE - i + 1] <> player then\
      win := false;\
  if win then\
    exit(true);\
\
  CheckWin := false;\
end;\
\
procedure PlayerMove(var b: TBoard; player: char);\
var\
  x, y: integer;\
begin\
  repeat\
    writeln('Player ', player, ', enter your move (row and column): ');\
    readln(x, y);\
  until (x >= 1) and (x <= SIZE) and (y >= 1) and (y <= SIZE) and (b[x, y] = ' ');\
  b[x, y] := player;\
end;\
\
procedure SwitchPlayer(var player: char);\
begin\
  if player = 'X' then\
    player := 'O'\
  else\
    player := 'X';\
end;\
\
function IsFull(b: TBoard): boolean;\
var\
  i, j: integer;\
begin\
  for i := 1 to SIZE do\
    for j := 1 to SIZE do\
      if b[i, j] = ' ' then\
        exit(false);\
  IsFull := true;\
end;\
\
begin\
  currentPlayer := 'X';\
  moves := 0;\
  InitializeBoard(board);\
  \
  repeat\
    PrintBoard(board);\
    PlayerMove(board, currentPlayer);\
    moves := moves + 1;\
    if CheckWin(board, currentPlayer) then\
    begin\
      PrintBoard(board);\
      writeln('Player ', currentPlayer, ' wins!');\
      break;\
    end;\
    if IsFull(board) then\
    begin\
      PrintBoard(board);\
      writeln('The game is a draw!');\
      break;\
    end;\
    SwitchPlayer(currentPlayer);\
  until false;\
end.\
}